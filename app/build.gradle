plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
}

android {
    compileSdkVersion configs.compileSdkVersion

    defaultConfig {
        applicationId "com.qiusuo.videoeditor"
        minSdkVersion configs.minSdkVersion
        targetSdkVersion configs.targetSdkVersion
        versionCode 100
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {

        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            java {
                srcDir "src/main/java"
//                srcDir "../selector/src/main/java"
            }
            res {
                srcDir "src/main/res"
//                srcDir "../selector/src/main/res"
            }
            assets {
                srcDir "src/main/assets"
//                srcDir "../selector/src/main/assets"
            }
            manifest.srcFile {
                //其它Manifest
                def libraryManifests = [
                        "src/main/AndroidManifest.xml",
//                        "../selector/src/main/AndroidManifest.xml",
                ]
                //主manifest
                def mainManifestPath = 'src/main/AndroidManifest.xml'
                //新生成的manifest
                def targetManifestPath = 'src/main/AndroidManifest_target.xml'

                def mainManifest = new XmlParser().parseText(file(mainManifestPath).getText("utf-8"))
                Node mainApplication = mainManifest["application"][0]
                NodeList nodesInMainApplication = mainApplication.value();

                for (libraryManifestPath in libraryManifests) {
                    def libraryManifest = new XmlParser().parseText(file(libraryManifestPath).getText("utf-8"))
                    Node libraryApplication = libraryManifest["application"][0]
                    NodeList nodesInLibraryApplication = libraryApplication.value();
                    nodesInMainApplication.addAll(nodesInLibraryApplication);
                }

                def serialize = groovy.xml.XmlUtil.serialize(mainManifest)
                file(targetManifestPath).write(serialize, "utf-8")

                return targetManifestPath
            }
        }
    }
}
//configurations.all {
//    resolutionStrategy {
//        force 'androidx.core:core:1.7.0'
//    }
//}

dependencies {
    implementation 'androidx.core:core:{latest version}'
    implementation "androidx.core:core-ktx:$kotlin_base_version"
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation("androidx.recyclerview:recyclerview:1.2.1")
    implementation project(path: ':mediaSdk')
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation("androidx.annotation:annotation:${configs.androidx_annotation}")
    //retrofit
    implementation("com.squareup.retrofit2:retrofit:${configs.versions_retrofit}")
    implementation("com.squareup.retrofit2:adapter-rxjava2:${configs.versions_retrofit}")
    implementation("com.squareup.retrofit2:converter-gson:${configs.versions_retrofit}")
    implementation("com.squareup.retrofit2:converter-scalars:${configs.versions_retrofit}")

    //room
    implementation("androidx.room:room-runtime:${configs.androidx_room}")
    implementation("androidx.room:room-rxjava2:${configs.androidx_room}")
    implementation("androidx.room:room-ktx:${configs.androidx_room}")
    kapt("androidx.room:room-compiler:${configs.androidx_room}")

    //状态栏
    // 基础依赖包，必须要依赖
    implementation 'com.gyf.immersionbar:immersionbar:3.0.0'
// fragment快速实现（可选）
    implementation 'com.gyf.immersionbar:immersionbar-components:3.0.0'
// kotlin扩展（可选）
    implementation 'com.gyf.immersionbar:immersionbar-ktx:3.0.0'

    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.6.0")
//    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.6.0"

    implementation("androidx.lifecycle:lifecycle-process:${configs.androidx_lifecycle}")

    implementation("androidx.activity:activity-ktx:${configs.androidx_activity_ktx}")
    implementation("androidx.fragment:fragment-ktx:${configs.androidx_fragment_ktx}")

    // Glide
    implementation("com.github.bumptech.glide:glide:${configs.version_glide}")
    implementation("com.github.bumptech.glide:okhttp3-integration:${configs.version_glide}")
    kapt("com.github.bumptech.glide:compiler:${configs.version_glide}")
    // 下拉刷新
    implementation("in.srain.cube:ultra-ptr:${configs.versions_ptr}")
    // 右滑返回
    implementation("me.imid.swipebacklayout.lib:library:${configs.versions_swipebacklayout}")

    // Lottie
    implementation("com.airbnb.android:lottie:${configs.versions_lottie}")
    // Banner
    implementation("io.github.youth5201314:banner:${configs.versions_banner}")

    implementation 'pub.devrel:easypermissions:3.0.0'
    implementation 'com.squareup.picasso:picasso:2.71828'
//    implementation "androidx.appcompat:appcompat:${configs.version_appcompat}"
//    implementation "androidx.recyclerview:recyclerview:${configs.version_recyclerview}"
//    implementation "androidx.activity:activity:${configs.activity_version}"
//    implementation "androidx.fragment:fragment:${configs.fragment_version}"
//    implementation "androidx.exifinterface:exifinterface:${configs.androidx_exifinterface_version}"
//    implementation "androidx.viewpager2:viewpager2:${configs.viewpage2}"
//    implementation "androidx.constraintlayout:constraintlayout:${configs.constraintlayout}"
    implementation "com.google.android.exoplayer:exoplayer:${configs.exoplayer}"
//    implementation "com.github.bumptech.glide:glide:${configs.glide_version}"
//
    implementation("io.coil-kt:coil:${configs.coil_version}")
    implementation("io.coil-kt:coil-gif:${configs.coil_version}")

}